
#!/gpfs0/biores/apps/Miniconda3/Miniconda_v4.3.21/bin/python3.6
"""
This code receives a processed pileup (The output of process_pileup.py) and outputs a gff3-formatted file of all the flanking regions of that current organism to be inputted into htseq-count.
"""
#%%
import pandas as pd
from make_junctions import genomic_ranges, path_check
import numpy as np
import os, argparse
import sys
PATH = os.getcwd()
# %%
#Grange format: [start, end, gene]


def get_flanks(sample, granges, window, org):
    """
    Create a dataframe of window*2 size regions around each gene end and beginning. Each row in the dataframe is a single junction, create two rows for junctions that are bigger than window size.
    
    Parameters
    ----------
    sample : pd.DataFrame
        The input sample csv outputted by process_pileup.py
    grange : list
        The list of granges created by the genomic_ranges function
    window : int
        The window size to count reads in
    org : str
        The organism name
    Returns
    -------
    junc_only : pd.DataFrame
        A dataframe of the flanking areas
    """
    sample['gpair'] = np.nan
    sample['org'] = org
    for i, left_grange in enumerate(granges):
        if left_grange[0] == granges[-1][0]: break
        cur_granges = []
        right_grange = granges[i + 1]
        left = left_grange[2]
        right = right_grange[2]
        cur_granges.append(left_grange)
        if right_grange[0] - left_grange[1] > window * 2: # If the gene is bigger than twice the window size, create two rows for the junction
            for v, i, s in zip((left_grange, right_grange),(1,0), ('left', 'right')):
                cur_flank = (v[i] + window >= sample.Position) & (sample.Position > v[i] - window)
                sample.loc[cur_flank, 'gpair'] = '_'.join((left, right)) + '_' + s

        else:
            cur_flank = ((left_grange[1] + window >= sample.Position) & (sample.Position > left_grange[1] - window)) | ((right_grange[0] + window > sample.Position) & (sample.Position > right_grange[0] - window)) 
            sample.loc[cur_flank, 'gpair'] = '_'.join((left, right))

    junc_only = sample.groupby('gpair').agg({'org':'first', 'Position': ['first','last','count'], 'Strand' : 'first', 'Feature':'first'}).sort_values(by = ('Position', 'first'), ascending = True)
    cols = junc_only.columns.to_list()
    cols = [(i[1]).replace('first', '') + i[0] for i in cols]
    junc_only.columns = cols
    for i in junc_only.loc[junc_only.index.str.contains('left')].index:
        junc_only.loc[i.replace('left', 'right'), 'Strand'] = junc_only.loc[i, 'Strand']
    return junc_only
    

def gff_maker(junc_only, sample, output):
    """
    Create a gff3 file in the correct format for htseq-count based on the output of get_flanks
    
    Parameters
    ----------
    junc_only : pd.DataFrame
        The output of get_flanks where each row is a single flanking area
    """
    refseq = sample.Chromosome.iloc[500]
    initials = ''.join([i[0].upper() for i in sample.org.iloc[0].split('_')])
    org = sample.org.iloc[0]
    with open(output,'w') as file:
        file.write(f'##sequence-region {refseq} 1 {len(sample)}\n##species {org}\n')
        for i, row in junc_only.iterrows():
            file.write(f'{refseq}\tRefSeq\tgene\t{row.Position}\t{row.lastPosition}\t.\t{"+" if row.Strand else "-"}\t.\tID={row.Feature}-{initials}_{i};Name={row.gpair};gbkey={"CDS" if row.Feature == "gene" else "rRNA"};gene={row.gpair};gene_biotype={"protein_coding" if row.Feature == "gene" else "rRNA"}\n')

def half_avg_readsize(final_out):
    """
    Read the final.out file generated by STAR and change the junc window size parameter according to average mapped read size 
    """
    with open(final_out, 'r') as final:
        all_lines = final.readlines()
    for line in all_lines:
        if 'Average mapped length' in line:
            avg_mapped_read = round(float(line.split('\t')[1].replace('\n', '')), None)
    return avg_mapped_read/2

def main(args):
    """
    Unite the two functions based on the paramters of argparse
    """
    window = args.junc
    sample = pd.read_csv(args.annotated_pileup, index_col = 0)
    if '/' in window:
        window = half_avg_readsize(window)
        if window < 50:
            print(f'Window had to be shrinked down to 50!\nWindow size before shrinkage = {window}\n', file = sys.stderr)
            window = 50
    else:
        window = int(window)
    window = int(window * args.reducing_factor)
    org = args.org
    output = args.output
    if not args.stranded_mode:
        granges = genomic_ranges(sample, True)
        junc_only = get_flanks(sample, granges, window, org).reset_index()

    else:
        sample_pos = sample.loc[sample.Strand == True, :]
        sample_neg = sample.loc[sample.Strand == False, :]
        granges_pos = genomic_ranges(sample_pos, True)
        granges_neg = genomic_ranges(sample_neg, True)
        junc_only_pos = get_flanks(sample, granges_pos, window, org)
        junc_only_neg = get_flanks(sample, granges_neg, window, org)
        junc_only = pd.concat([junc_only_pos, junc_only_neg], axis = 0).reset_index()

    gff_maker(junc_only, sample, output)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = __doc__, prog = 'CustomGFFMaker')
    
    parser.add_argument('--annotated-pileup', help = 'Sample file path', type = path_check, metavar = 'annotated_pileup')
    parser.add_argument('--output', '-o', help = 'Output path')
    parser.add_argument('--junc', help = 'Flanking area size', metavar = 'int/path_to_final.out', default = 100, type = str)
    parser.add_argument('--org', help = 'Organism to work on', type = str, metavar='org_name')
    parser.add_argument('--version', action = 'version', version = '%(prog)s 1.0.0')
    parser.add_argument('--stranded-mode', help = 'Add this flag if you wish the junctions to be between genes in the same strand only (regardless of how far apart they are)', action = 'store_true', default = False)
    parser.add_argument('--reducing-factor', help = 'Reduce the window size by this factor', type = float, default = .975)
    args = parser.parse_args()
    main(args)





